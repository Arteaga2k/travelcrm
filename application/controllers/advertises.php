<?php/** * TravelCRM * * An open source CRM system for travel agencies * * @author		Mazvv (vitalii.mazur@gmail.com) * @copyright   2009 Vitalii Mazur (vitalii.mazur@gmail.com) * @license		GNU GPLv3 (http://gplv3.fsf.org)  * @link		http://www.travelcrm.org.ua */include_once APPPATH."libraries/core/Doccontroller.php";
class Advertises extends Doccontroller {	public function __construct(){		parent::__construct();		$this->lang->load('advertises');		$this->load->model('advertises_model');		$this->get_typedoc();		$this->load->helper('advertisescompanies');		$this->load->helper('advertisessources');		$this->load->helper('finjournal');		$this->load->library('upload');	}	public function _remap($m_Name){		switch ($m_Name) {			case 'create': {$this->create();break;}			case 'edit': {$this->edit();break;}			case 'details': {$this->details();break;}			case 'remove': {$this->remove();break;}			case 'sort': {$this->sort();break;}			case 'addrow': {$this->output->set_output($this->addrow());break;}			case 'removerow': {$this->output->set_output($this->removerow());break;}			case 'getrowsbody': {$this->output->set_output($this->getrowsbody());break;}			case 'allfilials': {$this->output->set_output($this->allfilials());break;}			case 'prop': {$this->output->set_output($this->prop());break;}			case 'recalc': {$this->output->set_output($this->recalc());break;}			case 'addattach': {$this->output->set_output($this->addattach());break;}			case 'removeattach': {$this->output->set_output($this->removeattach());break;}			case 'vmove': {$this->vmove();break;}			case 'move': {$this->move();break;}			case 'limit': {$this->limit();break;}			case 'help': {$this->help(); break;}			default: $this->index();		}	}	public function journal(){		$data = array();		$data['title'] = lang('ADVERTISES_TITLE');		$data['orid'] = $this->get_orid();		$data['sort'] = $this->get_session('sort');		$data['find'] = $this->find();		$data['fields']['rid'] = array('label'=>'Id', 'colwidth'=>'5%', 'sort'=>True); 		$data['fields']['date_doc'] =  array('label'=>lang('DATE_DOC'), 'colwidth'=>'10%', 'sort'=>True);		$data['fields']['source_name'] =  array('label'=>lang('SOURCE'), 'colwidth'=>'15%', 'sort'=>True);		$data['fields']['company_name'] =  array('label'=>lang('COMPANY'), 'colwidth'=>'15%', 'sort'=>True);		$data['fields']['bdate'] =  array('label'=>lang('BDATE'), 'colwidth'=>'10%', 'sort'=>True);		$data['fields']['edate'] =  array('label'=>lang('EDATE'), 'colwidth'=>'10%', 'sort'=>True);		$data['fields']['sum'] =  array('label'=>lang('SUM'), 'colwidth'=>'10%', 'sort'=>True);		$data['fields']['archive'] = array('label'=>lang('ARCHIVE'), 'colwidth'=>'10%', 'sort'=>True, 'type'=>'yes_no'); 		$data['fields']['modifyDT'] = array('label'=>lang('MODIFYDT'), 'colwidth'=>'20%', 'sort'=>True); 		$data['tools'] = $this->get_tools(); 		$data['ds'] = $this->advertises_model->get_ds();		$data['paging'] = $this->get_paging($this->advertises_model->get_calc_rows());		return $this->load->view('standart/grid', $data, True);			}	private function create(){		$data = array();		$this->set_validation();		$data['title'] = lang('ADVERTISES_TITLE_CREATE');		$data['orid'] = $this->get_orid();		$data['success'] = null;		$data['rows_body'] = $this->getrowsbody();		if ($this->form_validation->run() === True){			if($rid = $this->advertises_model->create_record()){				$this->session->set_flashdata('success', True);				redirect(get_currcontroller()."/edit/$rid", 'refresh');				return;			}			else {				$data['success'] = false;			} 		}		$data['content'] = $this->load->view('advertises/create', $data, True);		return $this->load->view('layouts/main_layout', $data);	}	private function edit(){		$rid = (int)$this->uri->segment(3);		if(!$rid) show_404();		$data = array();		$this->set_validation();		$data['title'] = lang('ADVERTISES_TITLE_EDIT');		$data['rid'] = $rid;		$data['orid'] = $this->get_orid();		$data['ds'] = $this->advertises_model->get_edit($rid);		$data['success'] = $this->session->flashdata('success')?$this->session->flashdata('success'):null;		if(!$data['ds']) show_404(); 		if ($this->form_validation->run() === True){			if($this->advertises_model->update_record()) $data['success'] = true;			else $data['success'] = false;			$data['ds'] = $this->advertises_model->get_edit($rid);		}		if($this->input->post('row_action')) $data['rows_body'] = $this->getrowsbody();		else{			$sub_data['rows'] = $this->advertises_model->get_rows($rid);			$data['rows_body'] = $this->load->view('advertises/rows', $sub_data, True);		}		# { список приаттаченых файлов		$data['attaches'] = $this->get_attaches($rid, True);		# } список приаттаченых файлов		$sub_data['rows'] = $this->advertises_model->get_rows($rid);		$data['rows_body'] = $this->load->view('advertises/rows', $sub_data, True);		$data['content'] = $this->load->view('advertises/edit', $data, True);		return $this->load->view('layouts/main_layout', $data);	}	private function details(){		$rid = (int)$this->uri->segment(3);		if(!$rid) show_404();		$data = array();		$data['title'] = lang('ADVERTISES_TITLE_DETAILS');		$data['rid'] = $rid;		$data['orid'] = $this->get_orid();		$data['ds'] = $this->advertises_model->get_edit($rid);		if(!$data['ds']) show_404(); 		# { список приаттаченых файлов		$data['attaches'] = $this->get_attaches($rid, True);		# } список приаттаченых файлов		$sub_data['rows'] = $this->advertises_model->get_rows($rid);		$data['rows_body'] = $this->load->view('advertises/rows_details', $sub_data, True);		$data['content'] = $this->load->view('advertises/details', $data, True);		return $this->load->view('layouts/main_layout', $data);	}	private function move(){		$rid = (int)$this->uri->segment(3);		if(!$rid) show_404();		$data = array();		$this->form_validation->set_rules('_employeers_rid', lang('NEW_OWNER'), 'required');		$data['title'] = lang('ADVERTISES_TITLE_MOVE');		$data['rid'] = $rid;		$data['orid'] = $this->get_orid();		$data['ds'] = $this->advertises_model->get_edit($rid);		$data['success'] = $this->session->flashdata('success')?$this->session->flashdata('success'):null;		if(!$data['ds']) show_404(); 		if ($this->form_validation->run() === True){			if($this->advertises_model->move_record()) $data['success'] = true;			else $data['success'] = false;		}		$data['content'] = $this->load->view('standart/move', $data, True);		return $this->load->view('layouts/main_layout', $data);	}		private function find(){		$data['orid'] = $this->get_orid();		$this->form_validation->set_rules('rid', 'Id', 'trim');		$this->form_validation->set_rules('doc_from', lang('DOC_FROM'), 'trim');		$this->form_validation->set_rules('doc_to', lang('DOC_TO'), 'trim');		$this->form_validation->set_rules('_filials_rid', lang('FILIAL'), 'trim');		$this->form_validation->set_rules('_advertisescompanies_rid', lang('COMPANY'), 'trim');		$this->form_validation->set_rules('_advertisessources_rid', lang('SOURCE'), 'trim');				if ($this->form_validation->run() == True){			$search_rule = array();			if($this->input->post('rid')) $search_rule['where']['_documents.rid'] = $this->input->post('rid');			if($this->input->post('doc_from')) $search_rule['where']['_advertises_headers.date_doc >='] = date('Y-m-d', strtotime($this->input->post('doc_from')));			if($this->input->post('doc_to')) $search_rule['where']['_advertises_headers.date_doc <='] = date('Y-m-d', strtotime($this->input->post('doc_to')));			if($this->input->post('_filials_rid')) $search_rule['where']['_advertises_rows._filials_rid'] = $this->input->post('_filials_rid');			if($this->input->post('_advertisescompanies_rid')) $search_rule['where']['_advertises_headers._advertisescompanies_rid'] = $this->input->post('_advertisescompanies_rid');			if($this->input->post('_advertisessources_rid')) $search_rule['where']['_advertises_headers._advertisessources_rid'] = $this->input->post('_advertisessources_rid');			$this->set_searchrule($search_rule);		}		$search = $this->get_session('searchrule');		$data['search'] = array_merge(element('like', $search, array()), element('where', $search, array()));		return $this->load->view('advertises/find', $data, True);	}	private function set_validation(){		$this->form_validation->set_rules('_advertisescompanies_rid', lang('COMPANY'), 'required');		$this->form_validation->set_rules('_advertisessources_rid', lang('SOURCE'), 'required');		$this->form_validation->set_rules('bdate', lang('BDATE'), 'required');		$this->form_validation->set_rules('edate', lang('EDATE'), 'required');		$this->form_validation->set_rules('sum', lang('SUM'), 'required');		$this->form_validation->set_rules('_currencies_rid', lang('CURRENCY'), 'required');		$this->form_validation->set_rules('date_doc', lang('DATE_DOC'), 'required');		$this->form_validation->set_rules('descr', lang('DESCR'), 'trim|max_length[512]');		$this->form_validation->set_rules('archive', lang('ARCHIVE'), 'trim');		return;	}		private function getrowsbody(){		$data = array();		$data['rows'] = array();		if($this->input->post('rows_action'))$this->form_validation->set_rules('_filials_rid', lang('FILIAL'), 'required|callback_check_filialinlist');		else $this->form_validation->set_rules('f_rid', lang('FILIAL'), 'callback_check_filialnotempty');		$filials = $this->input->post('f_rid')?$this->input->post('f_rid'):array();		$sums = $this->input->post('row_sum')?$this->input->post('row_sum'):array();		foreach($filials as $key=>$f) $data['rows'][$key] = array('filial'=>$f, 'sum'=>$sums[$key]); 		if ($this->form_validation->run() == True){			$data['rows'][] = array('filial'=>$this->input->post('_filials_rid'), 'sum'=>floatval($this->input->post('f_sum')));			return $this->load->view('advertises/rows', $data, True); 					}		return $this->load->view('advertises/rows', $data, True);	}		public function addrow(){		$this->form_validation->set_rules('_filials_rid', lang('FILIAL'), 'required|callback_check_filialinlist');		$filials = $this->input->post('f_rid')?$this->input->post('f_rid'):array();		$sums = $this->input->post('row_sum')?$this->input->post('row_sum'):array();		foreach($filials as $key=>$f) $data['rows'][$key] = array('filial'=>$f, 'sum'=>$sums[$key]);		if ($this->form_validation->run() == True){			$data['rows'][] = array('filial'=>$this->input->post('_filials_rid'), 'sum'=>floatval($this->input->post('f_sum')));		}		$data['rows_action'] = True;		return $this->load->view('advertises/rows', $data, True);	}		public function removerow(){		$data = array();		$data['rows'] = array();		$rid = $this->input->post('rows_action');		$filials = $this->input->post('f_rid')?$this->input->post('f_rid'):array();		$sums = $this->input->post('row_sum')?$this->input->post('row_sum'):array();		foreach($filials as $key=>$f) {			if($f==$rid) continue; # пропускаем филиал, который удаляется			$data['rows'][$key] = array('filial'=>$f, 'sum'=>$sums[$key]);		}		return $this->load->view('advertises/rows', $data, True);	}		public function check_filialinlist($frid){		$filials = $this->input->post('f_rid')?$this->input->post('f_rid'):array();		if(in_array($frid, $filials)){			$this->form_validation->set_message('check_filialinlist', lang('FILIAL_IN_LIST'));			return False;		}		return True;	}		public function check_filialnotempty($frid){		if(!count($frid)){			$this->form_validation->set_message('check_filialnotempty', lang('FILIALS_EMPTY'));			return False;		}		return True;	}	public function allfilials(){		$data = array();		$filials =$this->advertises_model->get_all_filials();		foreach($filials as $f) $data['rows'][] = array('filial'=>$f['filial'], 'sum'=>0.00);		return $this->load->view('advertises/rows', $data, True);	}		public function prop(){		$data = array('rows'=>array());		$filials = $this->input->post('f_rid')?$this->input->post('f_rid'):array();		if(!count($filials)) return $this->load->view('advertises/rows', $data, True);		$sum = ROUND(floatval($this->input->post('sum'))/count($filials), 2);		foreach($filials as $key=>$f) $data['rows'][$key] = array('filial'=>$f, 'sum'=>$sum);		return $this->load->view('advertises/rows', $data, True);	}	public function recalc(){		$data = array('rows'=>array());		$sums = $this->input->post('row_sum')?$this->input->post('row_sum'):array();		$sum = 0;		foreach($sums as $s) $sum += $s;		return $sum; 			}		private function addattach(){		$config['max_size']	= $this->config->item('crm_upload_max_size');		$config['upload_path']	= $this->config->item('crm_upload_path');		$config['encrypt_name'] = True;		$config['allowed_types']	= $this->config->item('crm_allowed_types');		$this->upload->initialize($config);		if($this->upload->do_upload()){			$this->advertises_model->addattach();		}		return $this->get_attaches($this->input->post('_documents_rid'));	}		private function get_attaches($doc_rid, $readonly = False){		$data = array();		$data['ds'] = $this->advertises_model->get_attaches($doc_rid);		$data['readonly'] = $readonly;		return $this->load->view('advertises/attaches', $data, True);	}		private function removeattach(){		$rid = $this->input->post('rid');		$this->advertises_model->removeattach($rid);		return $this->get_attaches($this->input->post('doc_rid'));	}	
}

?>