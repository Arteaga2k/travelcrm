<?php/** * TravelCRM * * An open source CRM system for travel agencies * * @author		Mazvv (vitalii.mazur@gmail.com) * @license		GNU GPLv3 (http://gplv3.fsf.org)  * @link		http://www.travelcrm.org.ua */include_once APPPATH."libraries/core/Crmcontroller.php";class Hotels extends Crmcontroller {	private $jtp = array('val'=>'rid', 'scr'=>'hotel_full_name', 'val_p'=>'_hotels_rid', 'scr_p'=>'hotel_full_name');	public function __construct(){		parent::__construct();		$this->lang->load('hotels');		$this->load->model('hotels_model');		$this->load->helper('curourts');		$this->load->helper('hotelscats');		$this->load->library('upload');				# Overwrite jtp mapper if need 		# It's very usable if form has some value_pickers with one type		if(element('val_p', $this->a_uri_assoc, null)) $this->jtp['val_p'] = element('val_p', $this->a_uri_assoc, null);		if(element('scr_p', $this->a_uri_assoc, null)) $this->jtp['scr_p'] = element('scr_p', $this->a_uri_assoc, null);	}
	public function _remap($m_Name){		switch ($m_Name) {			case 'create': {$this->create();break;}			case 'edit': {$this->edit();break;}			case 'details': {$this->details();break;}			case 'remove': {$this->remove();break;}			case 'move': {$this->move();break;}			case 'sort': {$this->sort();break;}			case 'vcreate': {$this->vcreate();break;}			case 'vedit': {$this->vedit();break;}			case 'vdetails': {$this->vdetails();break;}			case 'vremove': {$this->vremove();break;}			case 'vmove': {$this->vmove();break;}			case 'vsort': {$this->vsort();break;}			case 'vjournal': 			case 'vfind': {$this->vjournal(); break;}			case 'add_synonim': {$this->output->set_output($this->add_synonim()); break;}			case 'remove_synonim': {$this->output->set_output($this->remove_synonim()); break;}			case 'addattach': {$this->output->set_output($this->addattach());break;}			case 'removeattach': {$this->output->set_output($this->removeattach());break;}			case 'limit': {$this->limit();break;}			case 'help': {$this->help(); break;}			default: $this->index();		}	}

	public function journal(){		$data = array();		$data['title'] = lang('HOTELS_TITLE');		$data['orid'] = $this->get_orid();		$data['sort'] = $this->get_session('sort');		$data['find'] = $this->find();		$data['fields']['rid'] = array('label'=>'Id', 'colwidth'=>'5%', 'sort'=>True); 		$data['fields']['hotel_name'] =  array('label'=>lang('NAME'), 'colwidth'=>'30%', 'sort'=>True);		$data['fields']['curourt_name'] =  array('label'=>lang('CUROURT'), 'colwidth'=>'20%', 'sort'=>True);		$data['fields']['country_name'] =  array('label'=>lang('COUNTRY'), 'colwidth'=>'20%', 'sort'=>True); 		$data['fields']['hotelcat_name'] =  array('label'=>lang('HOTELCAT'), 'colwidth'=>'10%', 'sort'=>True);		$data['fields']['archive'] = array('label'=>lang('ARCHIVE'), 'colwidth'=>'10%', 'sort'=>True, 'type'=>'yes_no'); 		$data['fields']['modifyDT'] = array('label'=>lang('MODIFYDT'), 'colwidth'=>'10%', 'sort'=>True); 		$data['tools'] = $this->get_tools(); 		$data['ds'] = $this->hotels_model->get_ds();		$data['paging'] = $this->get_paging($this->hotels_model->get_calc_rows());		return $this->load->view('standart/grid', $data, True);			}

	private function create(){		$data = array();		$this->set_validation();		$data['title'] = lang('HOTELS_TITLE_CREATE');		$data['orid'] = $this->get_orid();		$data['success'] = null;		if ($this->form_validation->run() === True){			if($rid = $this->hotels_model->create_record()){				$this->session->set_flashdata('success', True);				redirect(get_currcontroller()."/edit/$rid", 'refresh');				return;			}			else {				$data['success'] = false;			} 		}		$data['content'] = $this->load->view('hotels/create', $data, True);		return $this->load->view('layouts/main_layout', $data);	}
	private function edit(){		$rid = (int)$this->uri->segment(3);		if(!$rid) show_404();		$data = array();		$this->set_validation();		$data['title'] = lang('HOTELS_TITLE_EDIT');		$data['rid'] = $rid;		$data['orid'] = $this->get_orid();		$data['ds'] = $this->hotels_model->get_edit($rid);		$data['success'] = $this->session->flashdata('success')?$this->session->flashdata('success'):null;		if(!$data['ds']) show_404(); 		if ($this->form_validation->run() === True){			if($this->hotels_model->update_record()) $data['success'] = true;			else $data['success'] = false;			$data['ds'] = $this->hotels_model->get_edit($rid);		}		# { список приаттаченых файлов		$data['attaches'] = $this->get_attaches($rid);		# } список приаттаченых файлов		$data['synonims_obj'] = $this->load->view('hotels/synonims_list', array('synonims_list'=>$this->hotels_model->get_synonims($rid)), True);		$data['content'] = $this->load->view('hotels/edit', $data, True);		return $this->load->view('layouts/main_layout', $data);	}

	private function details(){		$rid = (int)$this->uri->segment(3);		if(!$rid) show_404();		$data = array();		$data['title'] = lang('HOTELS_TITLE_DETAILS');		$data['rid'] = $rid;		$data['orid'] = $this->get_orid();		$data['ds'] = $this->hotels_model->get_edit($rid);		if(!$data['ds']) show_404(); 		# { список приаттаченых файлов		$data['attaches'] = $this->get_attaches($rid, True);		# } список приаттаченых файлов		$data['synonims_obj'] = $this->load->view('hotels/synonims_list', array('synonims_list'=>$this->hotels_model->get_synonims($rid), 'readonly'=>True), True);		$data['content'] = $this->load->view('hotels/details', $data, True);		return $this->load->view('layouts/main_layout', $data);	}
	private function find(){		$data['orid'] = $this->get_orid();		$this->form_validation->set_rules('hotel_name', lang('HOTEL_NAME'), 'trim');		$this->form_validation->set_rules('_curourts_rid', lang('CUROURT'), 'trim');		$this->form_validation->set_rules('_countries_rid', lang('COUNTRY'), 'trim');		$this->form_validation->set_rules('_hotelscats_rid', lang('HOTELCAT'), 'trim');		if ($this->form_validation->run() == True){			$search_rule = array();			if($this->input->post('hotel_name')) $search_rule['like']['_hotels.hotel_name'] = $this->input->post('hotel_name');			if($this->input->post('_curourts_rid')) $search_rule['where']['_hotels._curourts_rid'] = $this->input->post('_curourts_rid');			if($this->input->post('_hotelscats_rid')) $search_rule['where']['_hotels._hotelscats_rid'] = $this->input->post('_hotelscats_rid');			if($this->input->post('_countries_rid')) $search_rule['where']['_hotels._countries_rid'] = $this->input->post('_countries_rid');			$this->set_searchrule($search_rule);		}		$search = $this->get_session('searchrule');		$data['search'] = array_merge(element('like', $search, array()), element('where', $search, array()), element('having', $search, array()));		return $this->load->view('hotels/find', $data, True);	}

		public function check_unique_name($name){		$rid = $this->input->post('rid'); # для случая если проверка идет при редактировании		if($this->hotels_model->check_unique_name($name, $rid)){			$this->form_validation->set_message('check_unique_name', lang('HOTELS_NAME_NOTUNIQUE'));			return False;		}		return True;	}

	private function move(){		$rid = (int)$this->uri->segment(3);		if(!$rid) show_404();		$data = array();		$this->form_validation->set_rules('_employeers_rid', lang('NEW_OWNER'), 'required');		$data['title'] = lang('HOTELS_TITLE_MOVE');		$data['rid'] = $rid;		$data['orid'] = $this->get_orid();		$data['ds'] = $this->hotels_model->get_edit($rid);		$data['success'] = $this->session->flashdata('success')?$this->session->flashdata('success'):null;		if(!$data['ds']) show_404(); 		if ($this->form_validation->run() === True){			if($this->hotels_model->move_record()) $data['success'] = true;			else $data['success'] = false;			$data['ds'] = $this->hotels_model->get_edit($rid);		}		$data['content'] = $this->load->view('standart/move', $data, True);		return $this->load->view('layouts/main_layout', $data);	}		private function set_validation(){		$this->form_validation->set_rules('hotel_name', lang('NAME'), 'required|trim|callback_check_unique_name');		$this->form_validation->set_rules('_curourts_rid', lang('CUROURT'), 'trim');		$this->form_validation->set_rules('_countries_rid', lang('COUNTRY'), 'required|trim|callback_check_curourt');		$this->form_validation->set_rules('_hotelscats_rid', lang('CUROURT'), 'required|trim');		$this->form_validation->set_rules('descr', lang('DESCR'), 'trim|max_length[512]');		$this->form_validation->set_rules('archive', lang('ARCHIVE'), 'trim');		return;			}			/* Value pickers */	public function vjournal(){		$data = array();		$data['title'] = lang('HOTELS_TITLE');		$data['orid'] = $this->get_orid();		$data['sort'] = $this->get_session('sort');		$data['find'] = $this->vfind();		$data['fields']['rid'] = array('label'=>'Id', 'colwidth'=>'5%', 'sort'=>True); 		$data['fields']['hotel_name'] =  array('label'=>lang('NAME'), 'colwidth'=>'30%', 'sort'=>True);		$data['fields']['curourt_name'] =  array('label'=>lang('CUROURT'), 'colwidth'=>'15%', 'sort'=>True);		$data['fields']['country_name'] =  array('label'=>lang('COUNTRY'), 'colwidth'=>'15%', 'sort'=>True); 		$data['fields']['hotelcat_name'] =  array('label'=>lang('HOTELCAT'), 'colwidth'=>'10%', 'sort'=>True);		$data['fields']['archive'] = array('label'=>lang('ARCHIVE'), 'colwidth'=>'10%', 'sort'=>True, 'type'=>'yes_no'); 		$data['fields']['modifyDT'] = array('label'=>lang('MODIFYDT'), 'colwidth'=>'10%', 'sort'=>True); 		$data['jtp'] = $this->jtp;		$data['tools'] = $this->get_tools(); 		$data['ds'] = $this->hotels_model->get_ds();		$data['paging'] = $this->get_paging($this->hotels_model->get_calc_rows(), True);		$content = $this->load->view('standart/vgrid', $data, True);		$this->load->view('layouts/valuepicker_layout', array('content'=>$content));				return;	}	private function vcreate(){		$data = array();		$this->set_validation();		$data['title'] = lang('HOTELS_TITLE_CREATE');		$data['orid'] = $this->get_orid();		$data['success'] = null;		if ($this->form_validation->run() === True){			if($rid = $this->hotels_model->create_record()){				$this->session->set_flashdata('success', True);				redirect(get_currcontroller()."/vedit/$rid", 'refresh');				return;			}			else {				$data['success'] = false;			} 		}		$data['content'] = $this->load->view('hotels/vcreate', $data, True);		return $this->load->view('layouts/valuepicker_layout', $data);	}	private function vedit(){		$rid = (int)$this->uri->segment(3);		if(!$rid) show_404();		$data = array();		$this->set_validation();		$data['title'] = lang('HOTELS_TITLE_EDIT');		$data['rid'] = $rid;		$data['orid'] = $this->get_orid();		$data['jtp'] = $this->jtp;		$data['ds'] = $this->hotels_model->get_edit($rid);		$data['success'] = $this->session->flashdata('success')?$this->session->flashdata('success'):null;		if(!$data['ds']) show_404(); 		if ($this->form_validation->run() === True){			if($this->hotels_model->update_record()) $data['success'] = true;			else $data['success'] = false;			$data['ds'] = $this->hotels_model->get_edit($rid);		}		# { список приаттаченых файлов		$data['attaches'] = $this->get_attaches($rid);		# } список приаттаченых файлов		$data['synonims_obj'] = $this->load->view('hotels/synonims_list', array('synonims_list'=>$this->hotels_model->get_synonims($rid)), True);		$data['content'] = $this->load->view('hotels/vedit', $data, True);		return $this->load->view('layouts/valuepicker_layout', $data);	}	private function vdetails(){		$rid = (int)$this->uri->segment(3);		if(!$rid) show_404();		$data = array();		$data['title'] = lang('HOTELS_TITLE_DETAILS');		$data['rid'] = $rid;		$data['orid'] = $this->get_orid();		$data['jtp'] = $this->jtp;		$data['ds'] = $this->hotels_model->get_edit($rid);		if(!$data['ds']) show_404(); 		# { список приаттаченых файлов		$data['attaches'] = $this->get_attaches($rid, True);		# } список приаттаченых файлов		$data['synonims_obj'] = $this->load->view('hotels/synonims_list', array('synonims_list'=>$this->hotels_model->get_synonims($rid), 'readonly'=>True), True);		$data['content'] = $this->load->view('hotels/vdetails', $data, True);		return $this->load->view('layouts/valuepicker_layout', $data);	}	private function vfind(){		$data['orid'] = $this->get_orid();		$this->form_validation->set_rules('hotel_name', lang('HOTEL_NAME'), 'trim');		$this->form_validation->set_rules('_curourts_rid', lang('CUROURT'), 'trim');		$this->form_validation->set_rules('_countries_rid', lang('COUNTRY'), 'trim');		$this->form_validation->set_rules('_hotelscats_rid', lang('HOTELCAT'), 'trim');		if ($this->form_validation->run() == True){			$search_rule = array();			if($this->input->post('hotel_name')) $search_rule['like']['_hotels.hotel_name'] = $this->input->post('hotel_name');			if($this->input->post('_curourts_rid')) $search_rule['where']['_hotels._curourts_rid'] = $this->input->post('_curourts_rid');			if($this->input->post('_hotelscats_rid')) $search_rule['where']['_hotels._hotelscats_rid'] = $this->input->post('_hotelscats_rid');			if($this->input->post('_countries_rid')) $search_rule['where']['_hotels._countries_rid'] = $this->input->post('_countries_rid');			$this->set_searchrule($search_rule);		}		$search = $this->get_session('searchrule');		$data['search'] = array_merge(element('like', $search, array()), element('where', $search, array()), element('having', $search, array()));		return $this->load->view('hotels/vfind', $data, True);	}	private function vmove(){		$rid = (int)$this->uri->segment(3);		if(!$rid) show_404();		$data = array();		$this->form_validation->set_rules('_employeers_rid', lang('NEW_OWNER'), 'required');		$data['title'] = lang('HOTELS_TITLE_MOVE');		$data['rid'] = $rid;		$data['orid'] = $this->get_orid();		$data['ds'] = $this->hotels_model->get_edit($rid);		$data['success'] = $this->session->flashdata('success')?$this->session->flashdata('success'):null;		if(!$data['ds']) show_404(); 		if ($this->form_validation->run() === True){			if($this->hotels_model->move_record()) $data['success'] = true;			else $data['success'] = false;			$data['ds'] = $this->hotels_model->get_edit($rid);		}		$data['content'] = $this->load->view('standart/vmove', $data, True);		return $this->load->view('layouts/valuepicker_layout', $data);	}		public function check_curourt($_countries_rid){		if($this->input->post('_curourts_rid')){			$this->load->model('curourts_model');			if(!$this->curourts_model->is_curourt_from_country($_countries_rid, $this->input->post('_curourts_rid'))){				$this->form_validation->set_message('check_curourt', lang('CUROURT_IS_NOT_IN_COUNTRY'));				return False;			}					}		return True;		}		public function add_synonim(){		$this->form_validation->set_rules('hotel_name', lang('SYNONIM'), 'trim|required|callback_check_unique_name');		if ($this->form_validation->run() === True){			$this->hotels_model->add_synonim();		}		return $this->load->view('hotels/synonims_list', array('synonims_list'=>$this->hotels_model->get_synonims($this->input->post('_hotels_rid')), 'add_oper'=>true), True);			}	public function remove_synonim(){		$this->hotels_model->remove_synonim();		return $this->load->view('hotels/synonims_list', array('synonims_list'=>$this->hotels_model->get_synonims($this->input->post('_hotels_rid')), 'add_oper'=>true), True);			}			private function addattach(){		$config['max_size']	= $this->config->item('crm_upload_max_size');		$config['upload_path']	= $this->config->item('crm_upload_path').'/hotels';		$config['encrypt_name'] = True;		$config['allowed_types']	= 'gif|jpg|png';		/* { create upload directory if not exist */		if(!file_exists($config['upload_path'])) mkdir($config['upload_path']);		/* } create upload directory if not exist */		$this->upload->initialize($config);		if($this->upload->do_upload()){			$this->hotels_model->addattach();		}		return $this->get_attaches($this->input->post('_hotels_rid'));	}		private function get_attaches($_hotels_rid, $readonly = False){		$data = array();		$data['ds'] = $this->hotels_model->get_attaches($_hotels_rid);		$data['readonly'] = $readonly;		return $this->load->view('hotels/attaches', $data, True);	}		private function removeattach(){		$rid = $this->input->post('rid');		$this->hotels_model->removeattach($rid);		return $this->get_attaches($this->input->post('_hotels_rid'));	}	
}
?>